{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saman\\\\OneDrive\\\\Documents\\\\Thinkful\\\\Pomodoro\\\\src\\\\pomodoro\\\\Pomodoro.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  _s();\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const subFocus = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n\n  const addFocus = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const subBreak = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  };\n\n  const addBreak = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  const stop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pomodoro\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(FocusDuration, {\n        focusDuration: focusDuration,\n        addFocus: addFocus,\n        subFocus: subFocus,\n        session: session\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(BreakDuration, {\n        breakDuration: BreakDuration,\n        addBreak: addBreak,\n        subBreak: subBreak,\n        session: session\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        isTimerRunning: isTimerRunning,\n        playPause: playPause,\n        stop: stop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimeDisplay, {\n      session: session,\n      focusDuration: focusDuration,\n      breakDuration: breakDuration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pomodoro, \"gD7N3Vr/3gYtJlq7FBMoaudlkbA=\", false, function () {\n  return [useInterval];\n});\n\n_c = Pomodoro;\nexport default Pomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"sources":["C:/Users/saman/OneDrive/Documents/Thinkful/Pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","TimeDisplay","ButtonGroup","BreakDuration","FocusDuration","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","subFocus","addFocus","min","subBreak","addBreak","stop","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const subFocus = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5))\n  }\n\n  const addFocus = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5))\n  }\n\n  const subBreak = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1))\n  }\n\n  const addBreak = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1))\n  }\n\n  const stop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n    return setSession(nextTick);\n  },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n       <FocusDuration focusDuration={focusDuration}\n       addFocus={addFocus}\n       subFocus={subFocus}\n       session={session}/>\n        <BreakDuration breakDuration={BreakDuration}\n        addBreak={addBreak}\n        subBreak={subBreak}\n        session={session}/>\n      </div>\n\n      <div className=\"row\">\n      <ButtonGroup isTimerRunning={isTimerRunning}\n      playPause={playPause}\n      stop={stop} />\n      </div>\n      <TimeDisplay session={session}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}